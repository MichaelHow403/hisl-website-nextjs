name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate imagery manifest
        run: npm run images:process && npm run images:manifest
        
      - name: Lint check
        run: npm run lint
        
      - name: Type check
        run: npm run typecheck
        
      - name: Run tests
        run: npm run test
        
      - name: Build application
        run: npm run build
        env:
          # Provide mock environment variables for build
          NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY || 'mock-key' }}
          NEXT_PUBLIC_POSTHOG_HOST: ${{ secrets.NEXT_PUBLIC_POSTHOG_HOST || 'https://app.posthog.com' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 1

  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Run Lighthouse CI
        run: npm run lighthouse:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Start application
        run: npm run start &
        env:
          PORT: 3000
          
      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000
        
      - name: Run E2E tests
        run: npm run e2e
        
      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: test-results/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: Check for vulnerabilities
        run: npx audit-ci --config audit-ci.json
        continue-on-error: true

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality-gates, lighthouse-ci, e2e-tests]
    if: github.event_name == 'pull_request' && success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Comment PR with preview info
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const previewUrl = `https://hisl-website-nextjs-git-${context.payload.pull_request.head.ref}-michaelhow403.vercel.app`;
            
            const comment = `## üöÄ Preview Deployment
            
            Your changes have been deployed to a preview environment:
            
            **üåê Preview URL:** ${previewUrl}
            
            **üìä Test Results:**
            - ‚úÖ Quality Gates: Passed
            - ‚úÖ Lighthouse CI: Passed  
            - ‚úÖ E2E Tests: Passed
            
            **üîó Quick Links:**
            - [Globe Demo](${previewUrl}/globe)
            - [Michael's Bio](${previewUrl}/about/michael)
            - [IntegAI Info](${previewUrl}/about/integai)
            - [Site Poem](${previewUrl}/poem)
            - [Health Check](${previewUrl}/api/health)
            
            The preview will be updated automatically when you push new commits.`;
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: comment
            });

  merge-gate:
    name: Merge Gate
    runs-on: ubuntu-latest
    needs: [quality-gates, lighthouse-ci, e2e-tests, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: All checks passed
        run: echo "All quality gates passed! Ready for merge."
        
      - name: Update PR status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: "‚úÖ **All quality gates passed!** This PR is ready for merge."
            });
