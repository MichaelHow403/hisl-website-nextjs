{"version":3,"file":"../app/api/deepseek/route.js","mappings":"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","sources":["webpack://hisl-nextjs/external commonjs \"next/dist/shared/lib/router/utils/app-paths\"","webpack://hisl-nextjs/external commonjs \"next/dist/server/app-render/after-task-async-storage.external.js\"","webpack://hisl-nextjs/external commonjs2 \"module\"","webpack://hisl-nextjs/external commonjs \"next/dist/compiled/next-server/app-page.runtime.prod.js\"","webpack://hisl-nextjs/external commonjs \"require-in-the-middle\"","webpack://hisl-nextjs/external commonjs \"next/dist/server/app-render/action-async-storage.external.js\"","webpack://hisl-nextjs/external commonjs2 \"process\"","webpack://hisl-nextjs/external commonjs2 \"os\"","webpack://hisl-nextjs/external commonjs2 \"util\"","webpack://hisl-nextjs/external commonjs2 \"fs\"","webpack://hisl-nextjs/external commonjs \"next/dist/server/app-render/work-async-storage.external.js\"","webpack://hisl-nextjs/external node-commonjs \"node:child_process\"","webpack://hisl-nextjs/external commonjs2 \"path\"","webpack://hisl-nextjs/external commonjs2 \"diagnostics_channel\"","webpack://hisl-nextjs/external node-commonjs \"node:http\"","webpack://hisl-nextjs/external node-commonjs \"node:zlib\"","webpack://hisl-nextjs/external node-commonjs \"node:tls\"","webpack://hisl-nextjs/external node-commonjs \"node:https\"","webpack://hisl-nextjs/./node_modules/@opentelemetry/instrumentation/build/esm/platform/node/ sync","webpack://hisl-nextjs/external commonjs \"next/dist/compiled/next-server/app-route.runtime.prod.js\"","webpack://hisl-nextjs/external node-commonjs \"node:os\"","webpack://hisl-nextjs/external node-commonjs \"node:diagnostics_channel\"","webpack://hisl-nextjs/external commonjs2 \"crypto\"","webpack://hisl-nextjs/external commonjs \"import-in-the-middle\"","webpack://hisl-nextjs/external node-commonjs \"node:stream\"","webpack://hisl-nextjs/external node-commonjs \"node:util\"","webpack://hisl-nextjs/./node_modules/@prisma/instrumentation/node_modules/@opentelemetry/instrumentation/build/esm/platform/node/ sync","webpack://hisl-nextjs/external commonjs \"next/dist/server/app-render/work-unit-async-storage.external.js\"","webpack://hisl-nextjs/external node-commonjs \"node:fs\"","webpack://hisl-nextjs/external commonjs2 \"worker_threads\"","webpack://hisl-nextjs/external commonjs2 \"perf_hooks\"","webpack://hisl-nextjs/src/app/api/deepseek/route.ts","webpack://hisl-nextjs/sentry-wrapper-module","webpack://hisl-nextjs/?4f29","webpack://hisl-nextjs/external node-commonjs \"node:worker_threads\"","webpack://hisl-nextjs/external node-commonjs \"node:path\"","webpack://hisl-nextjs/external node-commonjs \"node:net\"","webpack://hisl-nextjs/","webpack://hisl-nextjs/external commonjs2 \"url\"","webpack://hisl-nextjs/external commonjs2 \"child_process\"","webpack://hisl-nextjs/external node-commonjs \"node:readline\"","webpack://hisl-nextjs/external commonjs2 \"tty\"","webpack://hisl-nextjs/external commonjs2 \"async_hooks\"","webpack://hisl-nextjs/external commonjs \"next/dist/shared/lib/no-fallback-error.external\"","webpack://hisl-nextjs/external node-commonjs \"node:inspector\"","webpack://hisl-nextjs/external commonjs2 \"events\"","webpack://hisl-nextjs/?4483"],"sourcesContent":["module.exports = require(\"next/dist/shared/lib/router/utils/app-paths\");","module.exports = require(\"next/dist/server/app-render/after-task-async-storage.external.js\");","module.exports = require(\"module\");","module.exports = require(\"next/dist/compiled/next-server/app-page.runtime.prod.js\");","module.exports = require(\"require-in-the-middle\");","module.exports = require(\"next/dist/server/app-render/action-async-storage.external.js\");","module.exports = require(\"process\");","module.exports = require(\"os\");","module.exports = require(\"util\");","module.exports = require(\"fs\");","module.exports = require(\"next/dist/server/app-render/work-async-storage.external.js\");","module.exports = require(\"node:child_process\");","module.exports = require(\"path\");","module.exports = require(\"diagnostics_channel\");","module.exports = require(\"node:http\");","module.exports = require(\"node:zlib\");","module.exports = require(\"node:tls\");","module.exports = require(\"node:https\");","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 44725;\nmodule.exports = webpackEmptyContext;","module.exports = require(\"next/dist/compiled/next-server/app-route.runtime.prod.js\");","module.exports = require(\"node:os\");","module.exports = require(\"node:diagnostics_channel\");","module.exports = require(\"crypto\");","module.exports = require(\"import-in-the-middle\");","module.exports = require(\"node:stream\");","module.exports = require(\"node:util\");","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 62992;\nmodule.exports = webpackEmptyContext;","module.exports = require(\"next/dist/server/app-render/work-unit-async-storage.external.js\");","module.exports = require(\"node:fs\");","module.exports = require(\"worker_threads\");","module.exports = require(\"perf_hooks\");","import { NextResponse } from \"next/server\";\n\n// Mock response for when no API keys are available\nconst generateMockResponse = (prompt: string): string => {\n  const responses = [\n    \"HISL AI SYSTEM RESPONSE: Construction analysis protocol initiated. Analyzing structural parameters and compliance requirements...\",\n    \"INTEGAI RESPONSE: Processing construction data through sovereign AI infrastructure. Recommendations will be generated based on current building standards.\",\n    \"RAMS-GUARD ANALYSIS: Risk assessment complete. No critical safety violations detected in submitted construction parameters.\",\n    \"BUILDTRACE AI: Real-time monitoring activated. Construction analytics pipeline ready for data processing.\",\n    \"COMPLIANCE CORE: Regulatory oversight active. All submitted plans will be evaluated against current building codes and regulations.\"\n  ];\n  \n  // Add context-aware response based on prompt keywords\n  const lowerPrompt = prompt.toLowerCase();\n  if (lowerPrompt.includes('safety')) {\n    return \"HISL AI SAFETY MODULE: Safety analysis complete. Construction safety protocols have been reviewed and recommendations are available.\";\n  } else if (lowerPrompt.includes('compliance') || lowerPrompt.includes('regulation')) {\n    return \"COMPLIANCE CORE: Regulatory analysis complete. All construction parameters meet current building codes and regulations.\";\n  } else if (lowerPrompt.includes('risk')) {\n    return \"RAMS-GUARD ANALYSIS: Risk assessment protocol executed. Construction risk factors have been identified and mitigation strategies prepared.\";\n  }\n  \n  const randomIndex = Math.floor(Math.random() * responses.length);\n  return responses[randomIndex];\n};\n\n// DeepSeek API call\nasync function queryDeepSeek(prompt: string, apiKey: string): Promise<string> {\n  const response = await fetch(\"https://api.deepseek.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${apiKey}`,\n    },\n    body: JSON.stringify({\n      model: \"deepseek-chat\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are HISL AI, a sovereign AI system for construction industry analysis. Provide professional, technical responses focused on construction, building codes, and safety.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      max_tokens: 1000,\n      temperature: 0.7\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(`DeepSeek API error: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  return data.choices?.[0]?.message?.content || \"No response generated\";\n}\n\n// Anthropic API call\nasync function queryAnthropic(prompt: string, apiKey: string): Promise<string> {\n  const response = await fetch(\"https://api.anthropic.com/v1/messages\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${apiKey}`,\n      \"anthropic-version\": \"2023-06-01\"\n    },\n    body: JSON.stringify({\n      model: \"claude-3-sonnet-20240229\",\n      max_tokens: 1000,\n      messages: [\n        {\n          role: \"user\",\n          content: `You are HISL AI, a sovereign AI system for construction industry analysis. Provide professional, technical responses focused on construction, building codes, and safety. User query: ${prompt}`\n        }\n      ]\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(`Anthropic API error: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  return data.content?.[0]?.text || \"No response generated\";\n}\n\n// OpenAI API call\nasync function queryOpenAI(prompt: string, apiKey: string): Promise<string> {\n  const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${apiKey}`,\n    },\n    body: JSON.stringify({\n      model: \"gpt-4\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are HISL AI, a sovereign AI system for construction industry analysis. Provide professional, technical responses focused on construction, building codes, and safety.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      max_tokens: 1000,\n      temperature: 0.7\n    }),\n  });\n\n  if (!response.ok) {\n    throw new Error(`OpenAI API error: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  return data.choices?.[0]?.message?.content || \"No response generated\";\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { prompt } = await request.json();\n    \n    if (!prompt) {\n      return NextResponse.json({ error: \"Prompt is required\" }, { status: 400 });\n    }\n\n    // Get API keys from environment variables\n    const DEEPSEEK_KEY = process.env.DEEPSEEK_API_KEY;\n    const ANTHROPIC_KEY = process.env.ANTHROPIC_API_KEY;\n    const OPENAI_KEY = process.env.OPENAI_API_KEY;\n\n    let response: string;\n\n    // Try APIs in order of preference with fallback logic\n    try {\n      if (DEEPSEEK_KEY) {\n        response = await queryDeepSeek(prompt, DEEPSEEK_KEY);\n      } else if (ANTHROPIC_KEY) {\n        response = await queryAnthropic(prompt, ANTHROPIC_KEY);\n      } else if (OPENAI_KEY) {\n        response = await queryOpenAI(prompt, OPENAI_KEY);\n      } else {\n        // No API keys available, use mock response\n        response = generateMockResponse(prompt);\n      }\n    } catch (apiError) {\n      // If the primary API fails, try fallback APIs\n      console.warn(\"Primary API failed, trying fallbacks:\", apiError);\n      \n      try {\n        if (ANTHROPIC_KEY && !DEEPSEEK_KEY) {\n          response = await queryAnthropic(prompt, ANTHROPIC_KEY);\n        } else if (OPENAI_KEY && !DEEPSEEK_KEY && !ANTHROPIC_KEY) {\n          response = await queryOpenAI(prompt, OPENAI_KEY);\n        } else {\n          response = generateMockResponse(prompt);\n        }\n      } catch (fallbackError) {\n        console.warn(\"Fallback APIs also failed, using mock response:\", fallbackError);\n        response = generateMockResponse(prompt);\n      }\n    }\n    \n    return NextResponse.json({ response });\n  } catch (error: unknown) {\n    const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"API route error:\", errorMessage);\n    \n    // Even on error, provide a fallback response\n    const fallbackResponse = generateMockResponse(\"system error\");\n    return NextResponse.json({ response: fallbackResponse });\n  }\n}\n","import * as origModule from 'next/dist/server/app-render/work-unit-async-storage.external.js';\nimport * as serverComponentModule from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport * from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport {} from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nimport * as Sentry from '@sentry/nextjs';\n\n// @ts-expect-error Because we cannot be sure if the RequestAsyncStorage module exists (it is not part of the Next.js public\n// API) we use a shim if it doesn't exist. The logic for this is in the wrapping loader.\n\nconst asyncStorageModule = { ...origModule } ;\n\nconst requestAsyncStorage =\n  'workUnitAsyncStorage' in asyncStorageModule\n    ? asyncStorageModule.workUnitAsyncStorage\n    : 'requestAsyncStorage' in asyncStorageModule\n      ? asyncStorageModule.requestAsyncStorage\n      : undefined;\n\nfunction wrapHandler(handler, method) {\n  // Running the instrumentation code during the build phase will mark any function as \"dynamic\" because we're accessing\n  // the Request object. We do not want to turn handlers dynamic so we skip instrumentation in the build phase.\n  if (process.env.NEXT_PHASE === 'phase-production-build') {\n    return handler;\n  }\n\n  if (typeof handler !== 'function') {\n    return handler;\n  }\n\n  return new Proxy(handler, {\n    apply: (originalFunction, thisArg, args) => {\n      let headers = undefined;\n\n      // We try-catch here just in case the API around `requestAsyncStorage` changes unexpectedly since it is not public API\n      try {\n        const requestAsyncStore = requestAsyncStorage?.getStore() ;\n        headers = requestAsyncStore?.headers;\n      } catch {\n        /** empty */\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return Sentry.wrapRouteHandlerWithSentry(originalFunction , {\n        method,\n        parameterizedRoute: '/api/deepseek',\n        headers,\n      }).apply(thisArg, args);\n    },\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst GET = wrapHandler(serverComponentModule.GET , 'GET');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst POST = wrapHandler(serverComponentModule.POST , 'POST');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst PUT = wrapHandler(serverComponentModule.PUT , 'PUT');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst PATCH = wrapHandler(serverComponentModule.PATCH , 'PATCH');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst DELETE = wrapHandler(serverComponentModule.DELETE , 'DELETE');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst HEAD = wrapHandler(serverComponentModule.HEAD , 'HEAD');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst OPTIONS = wrapHandler(serverComponentModule.OPTIONS , 'OPTIONS');\n\nexport { DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT };\n","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/lib/constants\";\nimport { NoFallbackError } from \"next/dist/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/server/response-cache\";\nimport * as userland from \"/home/michael/projects/hisl-website-nextjs/src/app/api/deepseek/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/deepseek/route\",\n        pathname: \"/api/deepseek\",\n        filename: \"route\",\n        bundlePath: \"app/api/deepseek/route\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"/home/michael/projects/hisl-website-nextjs/src/app/api/deepseek/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/deepseek/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","module.exports = require(\"node:worker_threads\");","module.exports = require(\"node:path\");","module.exports = require(\"node:net\");",null,"module.exports = require(\"url\");","module.exports = require(\"child_process\");","module.exports = require(\"node:readline\");","module.exports = require(\"tty\");","module.exports = require(\"async_hooks\");","module.exports = require(\"next/dist/shared/lib/no-fallback-error.external\");","module.exports = require(\"node:inspector\");","module.exports = require(\"events\");"],"names":["generateMockResponse","prompt","responses","lowerPrompt","toLowerCase","includes","randomIndex","Math","floor","random","length","queryDeepSeek","apiKey","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","max_tokens","temperature","ok","Error","statusText","data","json","choices","message","queryAnthropic","text","queryOpenAI","POST","request","NextResponse","error","status","DEEPSEEK_KEY","process","env","DEEPSEEK_API_KEY","ANTHROPIC_KEY","ANTHROPIC_API_KEY","OPENAI_KEY","OPENAI_API_KEY","apiError","console","warn","fallbackError","errorMessage","fallbackResponse","serverComponentModule.GET","serverComponentModule.PUT","serverComponentModule.PATCH","serverComponentModule.DELETE","serverComponentModule.HEAD","serverComponentModule.OPTIONS"],"sourceRoot":""}